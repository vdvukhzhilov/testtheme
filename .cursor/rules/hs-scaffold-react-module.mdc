---
description: Scaffold a new module
globs: 
---
# Scaffold a React Module

When scaffolding a new React module, follow these guidelines to create a consistent, well-structured foundation. Focus on creating the basic structure and necessary files without implementing the full functionality.

## Key Principles
- Create minimal, well-organized file structure
- Add TODOs and comments for future implementation
- Focus on scaffolding, not full implementation
- Include type definitions and prop interfaces
- Set up proper module metadata and configuration

## Required Files Structure
```
src/theme/components/modules/[ModuleName]/
├── index.tsx           # Main module component
├── fields.tsx          # Module field definitions
├── types.ts           # Type definitions
└── islands/           # (If needed) Client-side interactive components
    └── [Name]Island.tsx
```

## File Templates

### index.tsx
```tsx
import { ModuleMeta } from '../../types/modules.js';
import { styled } from 'styled-components';
import StyledComponentsRegistry from '../../StyledComponentsRegistry/StyledComponentsRegistry.jsx';
import { ModuleProps } from './types.js';

export const Component = (props: ModuleProps) => {
  return (
    <StyledComponentsRegistry>
      {/* TODO: Implement module content */}
    </StyledComponentsRegistry>
  );
};

export { fields } from './fields.js';

export const meta: ModuleMeta = {
  label: '[Module Label]',
  content_types: ['SITE_PAGE', 'LANDING_PAGE'],
  categories: ['design', 'body_content'],
};

export const defaultModuleConfig = {
  moduleName: 'elevate/components/modules/[module_name]',
  version: 0,
  themeModule: true,
};
```

### fields.tsx
```tsx
import { ModuleFields } from '@hubspot/cms-components/fields';

export const fields = (
  <ModuleFields>
    {/*
    TODO: Define module fields
    Common field types:
    - text
    - image
    - choice
    - group
    - boolean
    */}
  </ModuleFields>
);
```

### types.ts
```typescript
export interface ModuleProps {
  // TODO: Define module props based on fields
}

// TODO: Add additional type definitions as needed
```

### [Name]Island.tsx (if needed)
```tsx
import { styled } from 'styled-components';
import StyledComponentsRegistry from '../../../StyledComponentsRegistry/StyledComponentsRegistry.jsx';

interface IslandProps {
  // TODO: Define island props
}

const [Name]Island = (props: IslandProps) => {
  return (
    <StyledComponentsRegistry>
      {/* TODO: Implement island content */}
    </StyledComponentsRegistry>
  );
};

export default [Name]Island;
```

## Implementation Steps

1. **Analyze Requirements**
   - Identify if client-side interactivity is needed (islands)
   - Determine required field types
   - Plan component structure

2. **Create File Structure**
   - Create module directory
   - Add all required files
   - Set up proper imports

3. **Define Types**
   - Create interfaces for props
   - Add type definitions for any complex data structures

4. **Configure Module**
   - Set proper module metadata
   - Configure content types and categories
   - Set up module name and version

5. **Add TODOs and Comments**
   - Document required implementations
   - Note any complex logic that will be needed
   - Mark areas for future styling

## Best Practices
- Use TypeScript for all files
- Include StyledComponentsRegistry in all rendered components
- Follow HubSpot module naming conventions
- Add clear TODOs for future implementation
- Keep initial implementation minimal
- Document expected props and field usage

Remember: The goal is to create a solid foundation that can be built upon, not to implement the full functionality in the scaffolding phase.

## Example Scenario

Let's walk through creating a "Featured Products" module with the following requirements:

Note that you shouldn't use this in your final output. But this example provides details on the process you should follow and what expectations are.

1. Display a grid of product cards
2. Each product card has:
   - Product image
   - Title
   - Description
   - Price
   - "Learn More" button
3. Interactive features:
   - Hover effects on cards
   - Click to expand product details
4. Styling options:
   - Card layout (grid/list)
   - Color scheme
   - Spacing between cards

## Step 1: Module Analysis

### Module Purpose
- Primary function: Display featured products in a grid/list layout
- Content type: Product information with images
- User interactions: Hover effects and expandable details

### Component Architecture
- Main module component
- Product card component (reusable)
- Product details expansion island (for client-side interactivity)

### Island Requirements
✅ Islands needed:
- ProductDetailsIsland (for expanding/collapsing product details)
- Hydration trigger: visible

## Step 2: File Structure

```
src/theme/components/modules/FeaturedProducts/
├── index.tsx                    # Main module component
├── fields.tsx                   # Module field definitions
├── types.ts                     # Type definitions
├── assets/
│   └── module-icon.svg         # Module icon
└── islands/
    └── ProductDetailsIsland.tsx # Interactive product details
```

## Step 3: Initial File Scaffolding

### index.tsx
```tsx
import { ModuleMeta } from '../../types/modules.js';
import { styled } from 'styled-components';
import { Island } from '@hubspot/cms-components';
import StyledComponentsRegistry from '../../StyledComponentsRegistry/StyledComponentsRegistry.jsx';
import moduleIconSvg from './assets/module-icon.svg';
import ProductDetailsIsland from './islands/ProductDetailsIsland.js?island';

// Types
type ModuleProps = {
  // Define module props here based on fields.tsx
};

// Utility Functions
const handleProductExpand = () => {
  // Handle expanding/collapsing product details
};

const formatProductPrice = () => {
  // Format product price for display
};

// Main Component
export const Component = (props: ModuleProps) => {
  return (
    <StyledComponentsRegistry>
      {/*TODO: Module content will be implemented here */}
    </StyledComponentsRegistry>
  );
};

export { fields } from './fields.js';

export const meta: ModuleMeta = {
  label: 'Featured Products',
  content_types: ['SITE_PAGE', 'LANDING_PAGE'],
  icon: moduleIconSvg,
  categories: ['design', 'body_content'],
};

export const defaultModuleConfig = {
  moduleName: 'elevate/components/modules/featured_products',
  version: 0,
  themeModule: true,
};
```

### fields.tsx
```tsx
import {
  // Import the fields
} from '@hubspot/cms-components/fields';
import {
 // Import the fields you need from the fieldLibrary
} from '../../fieldLibrary/index.js';

export const fields = (
  <ModuleFields>
    {/*
      Fields will be defined here
      Don't actually add fields -- you are not trained on that.
      Instead just add todos for what fields you think should be added.
    */}
  </ModuleFields>
);
```

### islands/ProductDetailsIsland.tsx
```tsx
import { styled } from 'styled-components';
import StyledComponentsRegistry from '../../../StyledComponentsRegistry/StyledComponentsRegistry.jsx';

type ProductDetailsProps = {
  // Define island props here
};

const ProductDetailsIsland = (props: ProductDetailsProps) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleExpand = () => {
    // Handle expand/collapse state
  };

  return (
    <StyledComponentsRegistry>
      {/* Island content will be implemented here */}
    </StyledComponentsRegistry>
  );
};

export default ProductDetailsIsland;
```

### types.ts
```typescript
// Common types used across the module
export type Product = {
  // Define product type
};

export type StyleOptions = {
  // Define style option types
};
```

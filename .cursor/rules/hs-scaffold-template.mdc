---
description: Scaffold a new template
globs:
alwaysApply: false
---
# Scaffold a Template

When scaffolding a new template, follow these guidelines to create a consistent, well-structured foundation. Focus on creating the basic structure and necessary content without worrying about translations, scaffolding, or context values.

## Key Principles
- Create minimal, well-organized file structure
- Add TODOs and HubL comments `{# HubL comment #}` for future implementation
- Focus on building out the template using existing sections in the theme or with DND tags with hardcoded content if a section doesn't exist for a particular part of the template
- Set up proper template annotations
- Never hardcode colors or unnecessary styles
- Use existing theme modules over default modules
- Always check the codebase for existing modules before assuming default modules exist
- Always check existing sections and/or templates to see what fields they're passing into modules

## Core Concepts

### Template Annotations
At the top of a template is the file's [template annotations](mdc:https:/developers.hubspot.com/docs/guides/cms/content/templates/types/html-hubl-templates#template-annotations) which includes meta information about the section that is then used to display the template in the content creation flow when a user goes to choose a template to start their page with. Below is an example of a template annotation for a template.

```
<!--
  templateType: page
  label: Name of the template
  isAvailableForNewContent: true
  screenshotPath: ../images/template-previews/screenshot-of-the-template.png
-->
```

### Extending Base and Global Partials
Each of our templates extends a base file which includes a shared template structure. Within our base file there are three different blocks which allow us to optionally change the default content of those blocks for each template.

#### For page templates we should start our template with the following code:
```
<!--
  templateType: page
  label: Name of the template
  isAvailableForNewContent: true
  screenshotPath: ../images/template-previews/screenshot-of-the-template.png
-->
{% extends "./layouts/base.hubl.html" %}

{% block body %}
{% endblock body %}
```

#### For landing page templates we should start our template with the following code:
```
<!--
  templateType: page
  label: Name of the template
  isAvailableForNewContent: true
  screenshotPath: ../images/template-previews/screenshot-of-the-template.png
-->
{% extends "./layouts/base.hubl.html" %}

{% block header %}
  {% global_partial path="./partials/lp-header.hubl.html" %}
{% endblock %}

{% block body %}
{% endblock body %}

{% block footer %}
  {% global_partial path="./partials/lp-footer.hubl.html" %}
{% endblock %}
```

The reason for the difference is that we use a different header/footer partial on our landing pages. The landing page header/footer is simpler and doesn't include navigation. By default the base file includes our general website header/footer.

### DND Areas
A template is made up of [drag and drop HubL tags](mdc:https:/developers.hubspot.com/docs/reference/cms/hubl/tags/dnd-areas). For each template a DND area should be added within the `block_body`. This DND area defines where a user can drag and drop modules/sections around within the page area. This is what the template would look like with a DND area:
```
<!--
  templateType: page
  label: Name of the template
  isAvailableForNewContent: true
  screenshotPath: ../images/template-previews/screenshot-of-the-template.png
-->
{% extends "./layouts/base.hubl.html" %}

{% block body %}
  {% dnd_area "dnd_area"
    label="Main section"
  %}
  {% end_dnd_area %}
{% endblock body %}
```

Within the DND area tag, a template is made up of sections. Sections are full width pieces of a page that define smaller chunks of a page. These are typically broken up visually with a mix of spacing and/or colors. There are two ways that we can include sections in our template which include:

#### Theme Sections (Preferred)
Themes have section files which are meant to be reusable within both the page editor by users but also on templates by developers. The reusable sections act somewhat similarly to React components in that on the section file you can define context, which would be similar to props in React, that would then allow you to use that section on the template and edit the section's contents using context. You can learn more about section context [here](mdc:https:/developers.hubspot.com/docs/guides/cms/content/templates/drag-and-drop/sections). To include a pre-built theme section onto a template you would use the `include_dnd_partial` which you can learn more about [here](mdc:https:/developers.hubspot.com/docs/guides/cms/content/templates/drag-and-drop/sections#add-a-section-partial-to-a-template).

Theme sections are located inside the /sections/ directory and should be referenced with the path `../sections/section-name.hubl.html",`. These sections:
- Are specific to the website theme
- Should be used before considering net new sections on the template
- May be new and not used in other templates yet
- Are referenced with `../` in the path

Here is an example of a template that references theme sections in the DND area:
```
{% dnd_area "dnd_area"
  label="Main section"
%}
  {% include_dnd_partial path="../sections/hero-banner.hubl.html" %}
  {% include_dnd_partial path="../sections/about-us.hubl.html" %}
{% end_dnd_area %}
```

#### DND Area Tags
If there isn't a theme section that already exists, we can create a section within the template by using a `dnd_section`. A `dnd_section` is made up of `dnd_row`s, `dnd_column`s, and `dnd_module`s. You can read more about the HubL tags, their available parameters, and their nesting rules [here](mdc:https:/developers.hubspot.com/docs/reference/cms/hubl/tags/dnd-areas). Below is a very basic example of a section:
```
{% dnd_section %}
  {% dnd_column %}
    {% dnd_row %}
      {% dnd_column %}
        {% dnd_module
          path="../path/to/module.html"
          fieldName="fieldValue"
        %}
        {% end_dnd_module %}
      {% end_dnd_column %}
    {% end_dnd_row %}
  {% end_dnd_column %}
{% end_dnd_section %}
```

##### Modules Available to Be Used in a Section
A `dnd_section` can be built with theme and/or default modules.

###### Theme Modules (Preferred)
A theme module is a module that exists within a website theme and can only be used in that particular website theme. These files live in the same folder as the theme. You can learn more about theme modules [here](mdc:https:/developers.hubspot.com/docs/guides/cms/content/themes/overview).

Theme modules are located inside the components/modules directory and should be referenced with the path `../components/modules/ModuleName`. These modules:
- Are specific to the website theme
- Should be used before considering default modules
- May be new and not used in other sections yet - check the components/modules directory
- Are referenced with `../` in the path

###### Default Modules
Default modules are modules that can be used in any themes. These files live separately from themes. You can learn more about default modules and what their different fields are [here](mdc:https:/developers.hubspot.com/docs/reference/cms/modules/default-modules).

Default modules (prefixed with @hubspot/) should only be used when a suitable theme module doesn't exist. Always check the theme modules directory first.

When using default HubSpot modules, make sure to use the exact module names as they appear in existing code:

- For images, use `@hubspot/linked_image` (NOT `@hubspot/image` because that doesn't exist)
- For image galleries, use `@hubspot/image_grid`
- For forms, use `@hubspot/form`

Always check existing sections and templates first to see how modules are implemented before adding new ones. Grep for "@hubspot/" to find examples of default modules in use.

##### How to Reference Module Fields From a Section
Each module is made up of fields. Fields are what are used by a user to edit the module's contents. You can learn more about the fields available for HubL modules [here](mdc:https:/developers.hubspot.com/docs/reference/cms/fields/module-theme-fields) and the fields available for React modules [here](mdc:https:/developers.hubspot.com/docs/guides/cms/react/modules#module-fields). When adding a module to a section, you can reference the module's fields to change the module field values for that particular section. Below is an example of a module's fields.json for a HubL module, equivalent fields.tsx file for a React module, and how that module is referenced in the section.

**Fields.json:**
```
[
  {
    "label": "Icon",
    "name": "icon",
    "type": "icon",
    "icon_set": "fontawesome-6.4.2",
    "default": {
      "name": "arrow-alt-circle-up",
      "type": "SOLID",
      "unicode": "f35b"
    }
  }
]
```

**Fields.tsx:**
```
import {
  IconField,
} from '@hubspot/cms-components/fields';
export const fields = (
  <ModuleFields>
    <IconField
      label='Icon'
      name='icon'
      iconSet='fontawesome-6.4.2'
      default={{
        name: 'arrow-alt-circle-up',
        type: 'SOLID',
        unicode: 'f35b'
      }}
    />
  </ModuleFields>
);
```

**Reference in section:**
```
{% dnd_section %}
  {% dnd_column %}
    {% dnd_row %}
      {% dnd_column %}
        {% dnd_module
          path="../path/to/module.html"
          icon={
            name: 'arrow-alt-circle-up',
            type: 'SOLID',
            unicode: 'f35b'
          }
        %}
        {% end_dnd_module %}
      {% end_dnd_column %}
    {% end_dnd_row %}
  {% end_dnd_column %}
{% end_dnd_section %}
```

## Reference Documentation
This is the [main Hubspot developer documentation](mdc:https:/developers.hubspot.com/docs). Here are other key pieces of this documentation to consider for section developement:

### Key Documentation Sections That Are Most Relevant
- [Available HubL module fields](mdc:https:/developers.hubspot.com/docs/reference/cms/fields/module-theme-fields)
- [Available React module fields](mdc:https:/github.hubspot.com/cms-react/field-types)
- [Available default modules](mdc:https:/developers.hubspot.com/docs/reference/cms/modules/default-modules)
- [Section documentation](mdc:https:/developers.hubspot.com/docs/reference/cms/templates/sections)
- [HubL DND area tags](mdc:https:/developers.hubspot.com/docs/reference/cms/hubl/tags/dnd-areas)

## Required Files Structure
```
src/theme/templates/[template-name].hubl.html
```

## File Template
```
<!--
  templateType: page
  label: Name of the template
  isAvailableForNewContent: true
  screenshotPath: ../images/template-previews/screenshot-of-the-template.png
-->
{% extends "./layouts/base.hubl.html" %}

{% block body %}
  {% dnd_area "dnd_area"
    label="Main section"
  %}
  {% end_dnd_area %}
{% endblock body %}
```

## Implementation Steps

1. **Analyze Requirements**
  - Identify what sections may be needed to build the template
  - Determine if there is a theme section that would meet the need for each section first
  - If a template specific section is needed:
    - Identify what modules may be needed to build the section
    - Determine if there is a theme module or default module for the required modules
    - Plan section structure for that particular section

2. **Create File Structure**
   - Create a template file in the `template` directory with a file name that describes the contents of the template

3. **Build Template Contents**
   - Update the template annotations at the top of the template file to include the template label
   - Add any theme sections inside of the DND area that work for the provided designs (start without including context first) and add HubL comments for any places that would require a template specific sections (e.g. a theme section doesn't currently exist that would work).
   - For template specific sections:
    - Build out the DND tag structure and for modules add paths to theme modules or default modules
    - Pass in content to module fields as needed
    - Stop and think

4. **Compare Mockup (if any)**
   - If any details, like images or smaller headings were left out of Step 3's code, add those in now
   - Stop and think

5. **Compare To Existing Templates**
   - Find other existing templates in the templates directory and try to follow their pattern
   - Follow the module fields that existing templates (found in src/theme/templates/*.hubl.html) use for module usage
   - If a module exists but isn't used in any of the sections yet, it is a new module and can still be utilized
   - Stop and think

6. **Add TODOs and Comments**
   - Document required implementations
   - Mark any places that a developer may need to spend extra time reviewing or adjusting
   - If images are linked that may not match the mockup (if any), comment that for developer follow-up


## Verification Checklist
Before finalizing any template implementation, complete these specific verification steps:

1. **Section Verification**
  - Run `grep -r "include_dnd_partial" src/theme/templates/` to find usages of theme sections in templates
  - For each section you plan to use, verify its exact name and different context parameters
  - Document the verified section naems/paths in your implementation notes

2. **Module Verification**
   - Run `grep -r "@hubspot/" src/theme/sections/` and `grep -r "@hubspot/" src/theme/templates/` to find all default HubSpot modules in use
   - Run `grep -r "path=\"\.\./" src/theme/sections/` and `grep -r "path=\"\.\./" src/theme/templates/` to find theme modules in use
   - For each module you plan to use, verify its exact name and parameter structure from existing sections
   - Document the verified module names/paths in your implementation notes

3. **Parameter Structure Verification**
   - For each module, examine at least 2 different existing implementations to confirm parameter structure
   - Copy the exact parameter structure from existing implementations when possible
   - Verify boolean values use proper format (lowercase true/false)
   - Verify object properties use proper quoting and format

4. **Final Pre-implementation Checks**
   - Compare your template structure side-by-side with a similar existing template
   - Confirm DND structure matches existing patterns (section → column → row → module)
   - Verify all theme sections are referencing context variables consistently
   - Double-check default values against existing sections and templates

## Best Practices
When building templates, we follow a set of best practices to ensure that the templates are of the best quality.

### Code Formatting
- Use double quotation marks for HubL.
- Add space between brackets and HubL variable name (e.g. `{% dnd_section %}` instead of `{%dnd_section %}`).
- HubL filters should be added directly following a statement or expression (e.g. `{{ "Hello World" | title }}` instead of `{{ "Hello World"|title }}`).
- Use snake case with names, variables, and macros (e.g. `my_variable` instead of `myVariable`).
- Use or, and, and not rather than ||, &&, and !
- Don't use commas between parameters on HubL tags and modules.
- Opening and closing HubL tags should be on their own line to increase legibility.
- For modules with more parameters than `name` or `path`, the parameters should be written on their own line to increase legibility.
- Use double quotes around object keys when referencing module fields in HubL.
- When using a boolean value use `true` and `false` vs. `True` and `False`.
- For margin and padding parameters, the values should be ordered: top, right, bottom, left to match CSS shorthand for those properties.
- Follow existing sections in the codebase

### Styling Best Practices
- Don't hardcode colors
- Don't add unnecessary background colors or styling
- Let theme handle basic styling
- Only add styles that are specific to the section's layout
- Use appropriate column widths and offsets
- Use consistent margin/padding values
- Structure complex layouts with nested rows and columns

### Module Usage
- Use the most specific module for the job (e.g., List module for lists instead of RichText)
- Check existing sections in the codebase for module usage patterns
- Reference module fields correctly based on the module's fields.tsx definition
- If using an image module, use "lazy" for loading if the section is going to be below the fold; otherwise, use "eager"

### Naming Conventions
- The label for the template should be sentence case (e.g. "Hero section").
- The file name for the template should be kebab case (e.g. "lp-event.hubl.html") and should have the extension `.hubl.html`.

### Documentation
- Add HubL comments if needed to indicate what the different parts of the code do (e.g. `{# This is a comment #}`)

### Common Pitfalls to Avoid
1. Hardcoding colors or unnecessary styles
2. Using RichText for structured content that has a dedicated module
3. Assuming default modules exist without checking documentation
4. Not checking the /sections/ directory for available theme sections
4. Not checking the /components/modules directory for available theme modules

## Example Scenario

Let's walk through creating an "Learn more" landing page template with the following requirements:

Note that you shouldn't use this in your final output. But this example provides details on the process you should follow and what expectations are.

**User prompt:** Create a landing page template using an attached screenshot

1. **Analyze Requirements**
  - Identify what sections exist on the template screenshot
    - We should ignore the header and footer when looking at this and just focus on the body of the page
  - See if we have theme sections that match the sections we found
    - Look through the sectrion preview images we have of each section and see if we have an close matches
    - If we do, identify which sections those section preview images align with
  - For any section that doesn't match an existing theme section, take note of this and:
    - Identify what modules may be needed to build the section
    - Determine if there is a theme module or default module for the required modules
    - Plan section structure

2. **Create File Structure**
   - Create a template file in the `template` directory with a file name that describes the contents of the template

3. **Build Template Contents**
   - Update the template annotations at the top of the template file to include the template label
   - Add include_dnd_partial tags for any theme section that we are using
   - For template specific sections:
    - Build out the DND tag structure and for modules add paths to theme modules or default modules
    - Pass in content to module fields as needed

4. **Compare Mockup (if any)**
   - If any details, like images or smaller headings were left out of Step 3's code, add those in now

5. **Compare To Existing Templates**
   - Find other existing templates in the templates directory and try to follow their pattern
   - If a module exists but isn't used in any of the sections yet, it is a new module and can still be utilized

6. **Add TODOs and Comments**
   - Document required implementations
   - Mark any places that a developer may need to spend extra time reviewing or adjusting
   - If images are linked that may not match the mockup (if any), comment that for developer follow-up


## Step 1: Analyze Requirements

### Identify what sections exist on the template screenshot
- Based on looking through the screenshot, the template has:
  - A full width hero section at the top
  - A section with a heading, an image on the left, and some product features on the right
  - A two column section with a form on the right and some text on the left
- Based on looking at the theme sections, we can see that there is:
  - A theme section called `hero-banner-centered-dark.hubl.html` that matches for the hero section
  - A theme section called `features.hubl.html` that matches for the second section
  - No theme section that matches the third section we note that we'll need to build a template specific section for it. We also note the structure of the section and what modules will be needed:
    - A half width column with a theme rich text module on the left
    - A half width column with a default form module on the right

## Step 2: Create File Structure

```
src/theme/templates/lp-signup.hubl.html
```

## Step 3: Build Section Contents
```
<!--
  templateType: page
  label: Landing page - signup
  isAvailableForNewContent: true
-->


{% block header %}
  {% global_partial path="./partials/lp-header.hubl.html" %}
{% endblock %}

{% block body %}
  {% dnd_area "dnd_area"
    label="Main section"
  %}

    {# Hero banner section #}

    {% include_dnd_partial path="../sections/hero-banner-centered-dark.hubl.html" %}

    {# Features section #}

    {% include_dnd_partial path="../sections/features.hubl.html" %}

    {# Two column forms section #}

    {% dnd_section %}
      {% dnd_column
        width=6
      %}
        {% dnd_row %}
          {% dnd_module path="../components/modules/RichText" %}
            {% module_attribute "richTextContentHTML" %}
              <p>Aenean bibendum nisi eu venenatis sollicitudin. Vivamus augue nisi, maximus quis diam sit amet, fringilla malesuada libero. Donec vehicula nibh ut libero iaculis tempus. Mauris posuere pellentesque leo vel pretium. Aliquam erat volutpat. Integer sodales in libero laoreet porta. Sed laoreet varius ex, at luctus arcu molestie sed. Suspendisse id nisi dui. Maecenas augue enim, posuere eget nisl sit amet, eleifend lacinia purus. Morbi tellus quam, cursus at tempor vel, hendrerit in elit. Fusce nec odio tincidunt enim iaculis semper.</p>
            {% end_module_attribute %}
          {% end_dnd_module %}
        {% end_dnd_row %}
      {% end_dnd_column %}
      {% dnd_column
        offset=6
        width=6
      %}
        {% dnd_row %}
          {% dnd_module path="@hubspot/form" %}
          {% end_dnd_module %}
        {% end_dnd_row %}
      {% end_dnd_column %}
    {% end_dnd_section %}

  {% end_dnd_area %}
{% endblock %}

{% block footer %}
  {% global_partial path="./partials/lp-footer.hubl.html" %}
{% endblock %}

```

## Step 4: Compare Mockup (if any)
- Nothing missing after comparing

## Step 5: Compare To Existing Templates
- Compare context variable usage (if any), styling, module usage, comments, and other patterns to existing templates located inside the templates directory


